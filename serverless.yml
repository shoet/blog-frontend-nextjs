service: blog-frontend-nextjs
frameworkVersion: "3"

provider:
  name: aws
  region: ap-northeast-1
  stage: ${opt:stage, self:custom.defaultStage}
  environment:
    STAGE: ${self:provider.stage}
    TZ: "Asia/Tokyo"

  ecr:
    images:
      NextJSContainerImage:
        path: ./
        file: Dockerfile
        platform: linux/amd64
        buildArgs:
          PORT: 3000
          API_HOST: ${ssm:/blog-frontend-nextjs-${self:provider.stage}/API_HOST}
          CDN_HOST: ${ssm:/blog-frontend-nextjs-${self:provider.stage}/CDN_HOST}

custom:
  defaultStage: dev
  domainName: ${ssm:/blog-frontend-nextjs-${self:provider.stage}/DOMAIN_NAME}
  domainCertificateArn: ${ssm:/blog-frontend-nextjs-${self:provider.stage}/DOMAIN_CERTIFICATE_ARN}
  hostedZoneId: ${ssm:/blog-frontend-nextjs-${self:provider.stage}/HOSTED_ZONE_ID}

package:
  patterns:
    - "!./**"

functions:
  NextJSBlogApp:
    role: LambdaRole
    image:
      name: NextJSContainerImage
    description: Next.js on Lambda
    timeout: 60
    environment:
      AWS_LWA_INVOKE_MODE: response_stream

resources:
  Resources:
    LambdaFunctionsURL:
      Type: AWS::Lambda::Url
      Properties:
        AuthType: AWS_IAM
        InvokeMode: RESPONSE_STREAM
        TargetFunctionArn: !GetAtt NextJSBlogAppLambdaFunction.Arn

    LambdaRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: nextjs-on-lambda-role-${self:provider.stage}
        AssumeRolePolicyDocument:
          Statement:
            - Effect: "Allow"
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - "sts:AssumeRole"
        Policies:
          - PolicyName: nextjs-on-lambda-policy-${self:provider.stage}
            PolicyDocument:
              Statement:
                - Effect: "Allow"
                  Action:
                    - "logs:CreateLogGroup"
                    - "logs:CreateLogStream"
                    - "logs:PutLogEvents"
                  Resource: "arn:aws:logs:*:*:*"

    CloudfrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Aliases:
            - ${self:custom.domainName}
          Origins:
            - DomainName:
                !Select [
                  2,
                  !Split ["/", !GetAtt LambdaFunctionsURL.FunctionUrl],
                ]
              Id: NextJSBlogApp
              CustomOriginConfig:
                HTTPPort: 80
                HTTPSPort: 443
                OriginProtocolPolicy: https-only
              OriginAccessControlId: !GetAtt CloudfrontOriginAccessControl.Id
          Enabled: true
          DefaultCacheBehavior:
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
              - PUT
              - POST
              - PATCH
              - DELETE
            CachedMethods:
              - GET
              - HEAD
              - OPTIONS
            TargetOriginId: NextJSBlogApp
            ViewerProtocolPolicy: redirect-to-https
            ForwardedValues:
              QueryString: true
          ViewerCertificate:
            AcmCertificateArn: ${self:custom.domainCertificateArn}
            SslSupportMethod: sni-only

    CloudfrontOriginAccessControl:
      Type: AWS::CloudFront::OriginAccessControl
      Properties:
        OriginAccessControlConfig:
          Description: for LambdaFunctionsURL
          Name: NextJSBlogAppOAC-${self:provider.stage}
          OriginAccessControlOriginType: lambda
          SigningBehavior: always
          SigningProtocol: sigv4

    Route53AliasRecord:
      Type: AWS::Route53::RecordSet
      Properties:
        HostedZoneId: ${self:custom.hostedZoneId}
        Name: ${self:custom.domainName}
        Type: A
        AliasTarget:
          DNSName: !GetAtt CloudfrontDistribution.DomainName
          HostedZoneId: Z2FDTNDATAQYW2 # CloudFront HostedZoneId
